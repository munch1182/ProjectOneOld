// 提取的公共build文件，用于统一版本和配置
// 使用此文件使用 apply from: '[路径/文件名]'
// 各个library或module可以覆盖配置
// 注意文件路径

apply from: '../buildCom/gitversion.gradle'
apply from: '../buildCom/androidversion.gradle'
apply from: '../buildCom/publishversion.gradle'

android {
    compileSdk Ver.compileSdk

    def versionDesc = gitVersion['versionDesc']

    defaultConfig {
        minSdk Ver.minSdk
        targetSdk Ver.targetSdk

        versionCode gitVersion['versionCode']
        versionName gitVersion['versionName']


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    def path = "key/key.properties"
    def keyProperties = findAndLoadKey(path)

    if (keyProperties != null) {
        signingConfigs {
            release {
                storeFile file(keyProperties['keyFile'])
                storePassword keyProperties['storePassword']
                keyAlias keyProperties['keyAlias']
                keyPassword keyProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            if (keyProperties != null) {
                signingConfig signingConfigs.release
            }
            minifyEnabled false
            zipAlignEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'VERSION_DESC', "\"${versionDesc}\""
            buildConfigField 'String', 'BUILD_TIME', "\"${getTime()}\""
        }
        debug {
            if (keyProperties != null) {
                signingConfig signingConfigs.release
            }
            debuggable true
            buildConfigField 'String', 'VERSION_DESC', "\"${versionDesc}\""
            buildConfigField 'String', 'BUILD_TIME', "\"${getTime()}\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    /*module*/
    /*applicationVariants.all { variant ->
        setupModuleApk(variant, false, gitVersion['versionCode'])
    }*/
    /*alternatively*/
    /*lib*/
    /*libraryVariants.all { variant ->
        setupModuleApk(variant, true)
    }*/
}

private static def getTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08"))
}

private def findAndLoadKey(path) {
    def keyProperties = null
    try {
        def keystorePropertiesFile = rootProject.file(path)
        if (keystorePropertiesFile.exists()) {
            keyProperties = new Properties()
            keyProperties.load(new FileInputStream(keystorePropertiesFile))
        }
    } catch (Exception e) {
        e.printStackTrace()
    }
    keyProperties
}

static def setupModuleApk(variant, isLib, versionCode) {
    if (variant == null) {
        return
    }
    def applicationId = [variant.mergedFlavor.applicationId, variant.buildType.applicationIdSuffix].findAll().join()
    def date = getTime()
    variant.outputs.each { output ->
        // 正式版下设置versionCode，参见gitVersion.gradle
        // 正式版更改输出app文件名，debug下不更改打包文件名，避免build生成的app文件越来越多
        if (!variant.getBuildType().isDebuggable()) {
            // 文件名前缀 + 渠道名
            def startName = applicationId
            def flavorName = variant.flavorName
            if (flavorName != null && flavorName != "") {
                startName += "_$flavorName"
            }
            // 文件名后缀
            def endName
            if (isLib) {
                endName = "_${variant.versionName}_${date}.aar"
            } else {
                endName = "_${variant.versionName}_${date}.apk"
            }
            output.outputFileName = startName + endName
        }
    }

}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation deps['appcompat']
    // 主动引入, 处理默认引入其余版本导致引入库的不同版本的问题
    implementation "androidx.arch.core:core-runtime:2.1.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0"
    implementation "androidx.lifecycle:lifecycle-livedata:2.5.0"
    implementation "androidx.customview:customview:1.1.0"
    implementation "androidx.drawerlayout:drawerlayout:1.1.1"
    implementation 'androidx.fragment:fragment:1.4.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
